server.tomcat.max-threads=1024
server.tomcat.mbeanregistry.enabled=true


gateway.datasource.primary.url=jdbc:postgresql://localhost:5432/postgres
gateway.datasource.primary.driverClassName=org.postgresql.Driver
gateway.datasource.primary.username=postgres
gateway.datasource.primary.password=mysecretpassword

gateway.datasource.primary.hikari.register-mbeans = true
gateway.datasource.primary.hikari.minimumIdle=10
# the max thread to handle HTTP connection can be higher than the max DB connection
# so we want to avoid locking a single DB connection for each HTTP connection (see spring.jpa.open-in-view)
# if you want to scale that process, please make sure that the maximumPoolSize * nb of process
# is lower than the postgresql max connection (SHOW max_connections; 100 by default)
gateway.datasource.primary.hikari.maximumPoolSize=20
gateway.datasource.primary.hikari.idleTimeout=600000
gateway.datasource.primary.hikari.poolName=HikariPool-Primary
gateway.datasource.primary.hikari.maxLifetime=1800000
gateway.datasource.primary.hikari.connectionTimeout=30000


gateway.datasource.lock.url=jdbc:postgresql://localhost:5432/postgres
gateway.datasource.lock.driverClassName=org.postgresql.Driver
gateway.datasource.lock.username=postgres
gateway.datasource.lock.password=mysecretpassword
gateway.datasource.lock.hikari.register-mbeans = true
gateway.datasource.lock.hikari.minimumIdle=2
gateway.datasource.lock.hikari.maximumPoolSize=10
gateway.datasource.lock.hikari.idleTimeout=600000
gateway.datasource.lock.hikari.poolName=HikariPool-Lock
gateway.datasource.lock.hikari.maxLifetime=1800000
gateway.datasource.lock.hikari.connectionTimeout=30000


spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


# https://medium.com/@rafaelralf90/open-session-in-view-is-evil-fd9a21645f8e
# https://vladmihalcea.com/the-open-session-in-view-anti-pattern/
# https://blog.frankel.ch/the-opensessioninview-antipattern/
# we don't want to lock a single DB connection from the pool during a HTTP REST API call
# because a call to a Lambda can take times and we don't need the DB in the meantime
# and because the number of thread in the HTTP pool is much bigger than the DB connection thread pool (which leads to timeout exceptions)
spring.jpa.open-in-view=false

spring.liquibase.changeLog=classpath:/db/db.changelog-master.xml

gateway.callback-public-uri=http://localhost:8083/job/refresh/
gateway.executor-uri=http://localhost:8081
# these threads will always consume connections from the pool, so please size the pool accordingly
gateway.async-threadpool-size=3
# in seconds
gateway.lock-timeout=60



logging.level.fr.grozeille=TRACE

